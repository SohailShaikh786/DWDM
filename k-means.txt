import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
import seaborn as sns

# Load the dataset
data = pd.read_csv(r"C:\\Users\DELL\\OneDrive\\Documents\\Mall_Customers.csv")

# Select relevant features for clustering
features = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Handle potential NaN values
features = features.fillna(0)

# Standardize the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Determine the optimal number of clusters using the Elbow method and Silhouette score
inertia = []
sil_scores = []  
K = range(2, 21)  # Extend K range for better search

for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)
    
    silhouette_avg = silhouette_score(scaled_features, kmeans.labels_)
    sil_scores.append(silhouette_avg)
    print(f'K={k}, Silhouette Score: {silhouette_avg:.4f}') 

# Plot the Elbow method graph for Inertia
plt.figure(figsize=(6, 5))
plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method For Optimal K')
plt.grid()
plt.show()

# Plot the Silhouette score graph
plt.figure(figsize=(6, 5))
plt.plot(K, sil_scores, 'go-')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score For Optimal K')
plt.grid()
plt.show()

# Choose the optimal number of clusters based on silhouette score
optimal_k = K[sil_scores.index(max(sil_scores))]
print(f'Optimal number of clusters (K): {optimal_k}')

kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
data['Cluster'] = kmeans.fit_predict(scaled_features)

# Count the number of instances in each cluster
cluster_counts = data['Cluster'].value_counts()
print(f'Counts of instances per cluster:\n{cluster_counts}')

# Calculate and print the silhouette score for the chosen number of clusters
final_silhouette_score = silhouette_score(scaled_features, data['Cluster'])
print(f'Silhouette Score for K={optimal_k}: {final_silhouette_score:.4f}')

# Print basic statistics for each cluster
for cluster in range(optimal_k):
    print(f'\nCluster {cluster} statistics:')
    print(data[data['Cluster'] == cluster][['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].describe())

# Save the results back to a new CSV file with cluster labels
output_path = r"C:\\Users\DELL\\OneDrive\\Documents\\output_file.csv"
data.to_csv(output_path, index=False)
print(f'Clustered data saved to {output_path}')

# Perform PCA for visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(scaled_features)

# Scatter plot of clusters
plt.figure(figsize=(10, 6))
plt.scatter(pca_result[:, 0], pca_result[:, 1], c=data['Cluster'], cmap='viridis', s=50)
plt.title(f'Customerhier Clusters (K={optimal_k}) - PCA Visualization')
plt.xlabel('PCA Component 1 (Age, Income, Spending Score Combined)')
plt.ylabel('PCA Component 2 (Age, Income, Spending Score Combined)')

# Mark the centroids
centroids = pca.transform(kmeans.cluster_centers_)
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, label='Centroids')
plt.legend()
plt.grid()
plt.show()

# Set the aesthetics for the plots
sns.set(style="whitegrid")

# Create individual figures for each histogram and boxplot

# Histogram for Age
plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Age', hue='Cluster', multiple='stack', bins=10, kde=True, color='skyblue')
plt.title('Age Distribution by Cluster')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Boxplot for Age
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='Cluster', y='Age')
plt.title('Age by Cluster')
plt.xlabel('Cluster')
plt.ylabel('Age')
plt.show()

# Histogram for Annual Income
plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Annual Income (k$)', hue='Cluster', multiple='stack', bins=10, kde=True, color='salmon')
plt.title('Annual Income Distribution by Cluster')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Frequency')
plt.show()

# Boxplot for Annual Income
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='Cluster', y='Annual Income (k$)')
plt.title('Annual Income by Cluster')
plt.xlabel('Cluster')
plt.ylabel('Annual Income (k$)')
plt.show()

# Histogram for Spending Score
plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Spending Score (1-100)', hue='Cluster', multiple='stack', bins=10, kde=True, color='purple')
plt.title('Spending Score Distribution by Cluster')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('Frequency')
plt.show()

# Boxplot for Spending Score
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='Cluster', y='Spending Score (1-100)')
plt.title('Spending Score by Cluster')
plt.xlabel('Cluster')
plt.ylabel('Spending Score (1-100)')
plt.show()
