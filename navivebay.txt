import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv(r"C:\\Users\\DELL\\OneDrive\\Documents\\data.csv")  # Update with your dataset path
print(data.head())

# Drop the unused column
data = data.drop(columns=['Unnamed: 32'], errors='ignore')

# Encode the diagnosis column
data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})

# Check for missing values
print("\nMissing values in each column:\n", data.isnull().sum())

# Drop rows with NaN values
data = data.dropna()

# Check the shape after dropping
print("\nDataset shape after dropping NaN values:", data.shape)

# Ensure we have data left before proceeding
if data.shape[0] == 0:
    print("No data left after dropping NaN values. Please check your dataset.")
else:
    # Separate features and target variable
    X = data.drop(['id', 'diagnosis'], axis=1)
    y = data['diagnosis']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Create and train the Gaussian Naive Bayes model
    model = GaussianNB()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print(f'\nAccuracy: {accuracy * 100:.2f}%')

    # Classification report
    print("\n")
    print(classification_report(y_test, y_pred))

    # Confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    print('Confusion Matrix :')
    print(cm)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=['Benign', 'Malignant'])
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.title('Confusion Matrix')
    plt.show()
